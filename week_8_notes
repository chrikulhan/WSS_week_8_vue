Video1:

**Vue.js

-Pronounced "View" or "View J S"
-A JavaScript front-end framework (java script library that runs in your browser
-Runs in the browser
-Front end frameworks have become increasingly popular in recent years
        -Web pages are getting more and more complex; more functionality,
        more user interaction
        -Move functionality from the server to the client (browser)
            -Less work for server
            -More responsive web pages for client
        -"Single Page Web Apps"
-Front end frameworks (in general) are for creating structure in complex JavaScript


**Front End Frameworks***

-The most popular is ReactJS
    -It has a huge feature set and can be used for large, complex websites
    -But it's not very beginner friendly - just building a hello world app on
    your computer takes a lot of setup
-Vue is much more beginner-friendly
    -We can build a hello world app in 5 minutes
-Vue was heavily inspired by React
-Learning Vue is useful by itself, and many of the concepts transfer to other
frameworks

https://www.treewebsolutions.com/articles/top-front-end-frameworks-in-2020-year-19


***Vue.js Concepts: MVVM – Model, View, ViewModel architecture**

-Model = data the web page needs. May be part of the page, and/or include data
from a database server, accessed via API calls
-View = the web page – what the user sees
-ViewModel = connects the view and the model, contains application logic
    -Directives to control what is displayed in the view, based on the state
    of the application's data
    -DOM listeners receive messages from the view, may update data in the model

https://vuejs.org/guide/introduction.html
https://v2.vuejs.org/

***Vue.js Concepts**

-Data binding - connecting data in the model to the view - display data from
the model on the page, using directives
-Vue is Reactive – page updates automatically in response to changes in data.
    -If the page is displaying data from the model, if the data changes, the
    page will change too
    -Data in input elements can be bound to the model too - the user types in data,
    the data in the model is updated - two-way data binding

**Code examples**
https://github.com/claraj/vue-week-1-examples

**Install Vue Dev Tools https://github.com/vuejs/vue-devtools **

-Extension to add Vue debugging tools to Chrome dev tools
-Use this link, there are two different versions, you need this newer one that works with Vue 3
-https://chrome.google.com/webstore/detail/vuejs-devtools/ljjemllljcmogpfapbkkighbhhppjdbg/related?hl=en
-Firefox: there is a Vue Add-on but as of March 2020 the Firefox addon doesn't seem to work with Vue 3, awaiting a new release

**Other examples:**
You can tell if a website uses Vue.js you can see the V at the top of chrome browser

Fathom
Louis Vuitton
Behance
livestorm

**Data**
    -Data is a function
    -Returns an object
    -The object's properties are reactive
    -Vue will monitor them, and if they change, anything that
    depends on them will change too

***Vue Events***
    -In your Vue instance, add a methods attribute
    -methods contains a list of function definitions
    -Add a method (very similar to a function) called
    addExclamation
    -addExclamation modifies the message property
    -Note that Vue data must be referenced with this.propertyName

**Computed Properties**
    -When resetting the message, we need to re-use the original value
    -Using data in two places is a possible cause of errors.
    If the data needs to be changed, we must  remember to change it in two places
    -Calculate a new value based on one or more data properties
   -Here, we can calculate the message to display from the original
   message and the number of exclamation points

***Forms and input with the v-model directive
   -Create a new page
   -Copy head, Vue script element from the previous webpage

 ***Test out your app
   -When you type, the text entered is displayed in the p element
   -v-model directive instructs Vue to bind the contents of the input to
   the data property name
   -And, v-model adds an input event listener to update the name property
   as the user types
   -Result: text updated as you type
   -Two-way data binding – if Vue modified the name data, the value in the
   input would change too (you can try this in Vue dev tools!)

***Conditional rendering with v-if directive
   -Page looks messy when the user hasn't entered their name yet
   -Use v-if to only render the paragraph if there is a name entered
   -Check the dev tools – there's no p element until a name is entered
   -Can use a string in a JS condition – empty strings are false,
   any other string is true

***Conditional rendering with v-if
   -Use v-if to only render the paragraph if there is a name entered
   -Check the Elements tab of dev tools
   -There's no p element unless a name is entered

***Empty string is false?
-Seven values in JavaScript evaluate to false when used in an if statement –
these are falsy values
false, 0, 0n (that's zero n), null, undefined, NaN and empty strings

    Everything else is true (or truthy)

***v-else

-What if you want to display different elements, based on a condition?
-An element with v-else directive must be immediately after the v-if
-There's also v-else-if https://v3.vuejs.org/guide/conditional.html


***A clear button
-Vue can modify data properties used with v-model
-Notice how data in the template changes; observe in Vue dev tools

video 5
vue things we've used:
1. v-model- used to connect to parts of code
conditions:
2. v-if
3. v-else
4. v-for (used to repeat drawing or rendering HTML once for each
    element in an array (for example)

If we have a list of data or lots of types of data:








